name: Deploy and Validate Metadata

on:
  pull_request:
    branches:
      - main

  push:
    branches:
      - main

jobs:
  sfdxvalidate:
    name: "Run SFDX Validate"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install SFDX CLI and sfdx-git-delta plugin # Ce package va vous permettre de faire un delta entre votre branche et la branch ciblé. Voici la documentation : https://github.com/scolladon/sfdx-git-delta
        run: |
          npm install -g @salesforce/cli@latest
          echo "y" | sf plugins install sfdx-git-delta@v6.0.0

      - name: Authentification Salesforce
        run: |
          echo "${{ secrets.SFDX_AUTH_URL }}" > sfdx_auth.url
          sfdx auth:sfdxurl:store -f sfdx_auth.url -a prod -d

      # 4. Préparer les refs delta (pull_request ou push)
      - name: Calculate delta refs
        id: delta-refs
        run: |
          echo "event: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Pour PR, compare HEAD de la PR à la base (main)
            FROM_REF="origin/${{ github.base_ref }}"
            TO_REF="HEAD"
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
          else
            # Pour push sur main, compare commit avant et après le push
            FROM_REF="${{ github.event.before }}"
            TO_REF="${{ github.sha }}"
          fi
          echo "Using FROM_REF=${FROM_REF}"
          echo "Using TO_REF=${TO_REF}"
          echo "FROM_REF=$FROM_REF" >> $GITHUB_ENV
          echo "TO_REF=$TO_REF" >> $GITHUB_ENV

      # 5. Delta debug (utile pour vérifier vraiment ce qui est DIFF)
      - name: Debug delta files
        run: |
          git diff --name-status $FROM_REF $TO_REF || echo "Diff failed (may be first push or broken context)"

      # 6. Générer le delta (on autorise aucune modif = OK, le step suivant gère tout)
      - name: Générer le delta
        run: |
          mkdir -p .temp/delta
          sfdx sgd:source:delta --from "$FROM_REF" --to "$TO_REF" --output-dir ".temp/delta" --generate-delta --source-dir force-app/main || true
      
      # 7. Vérifier si package.xml existe (= il y a du diff à pousser)
      - name: Check if package.xml exists
        id: check-delta
        run: |
          if [ -f .temp/delta/package.xml ]; then
            echo "package_exists=true"
          else
            echo "package_exists=false"
          fi

      # 8. DEPLOIEMENT (Push sur main)
      - name: Déployer sur PROD après push sur main
        if: github.event_name == 'push' && steps.check-delta.outputs.package_exists == 'true'
        run: |
          sfdx force:source:deploy --manifest .temp/delta/package.xml --testlevel RunLocalTests --wait 60 --verbose

      # 9. VALIDATION (Pull Request vers main)
      - name: Validation PR (CheckOnly)
        if: github.event_name == 'pull_request' && steps.check-delta.outputs.package_exists == 'true'
        run: |
          sfdx force:source:deploy --manifest .temp/delta/package.xml --testlevel RunLocalTests --checkonly --wait 60 --verbose

      # 10. Nettoyage du secret
      - name: Cleanup
        if: always()
        run: rm -f sfdx_auth.url